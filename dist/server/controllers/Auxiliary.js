'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const db = require("../db");
const mongodb_1 = require("mongodb");
const OK = 200;
const BadRequest = 400;
const InternalServerError = 500;
const inspect = (input) => util.inspect(input, false, Infinity, true);
module.exports.ClaimAppointment = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    var claimappointmentObject = req.swagger.params.claimappointment.value;
    if (!req.session) {
        res.status(BadRequest);
        res.send(JSON.stringify({ message: "Invalid session" }, null, 2));
        res.end();
    }
    if (!req.session.email) {
        res.status(BadRequest);
        res.send(JSON.stringify({ message: "Login required" }, null, 2));
        res.end();
    }
    db.Schedule.findOne({ _id: new mongodb_1.ObjectID(claimappointmentObject.s_id) }, function (err, result) {
        if (err) {
            res.status(InternalServerError);
            res.send(JSON.stringify({ message: inspect(err) }, null, 2));
            res.end();
        }
        if (!result) {
            res.status(BadRequest);
            res.send(JSON.stringify({ messagge: "Schedule Doesn't exist" }, null, 2));
            res.end();
        }
        else {
            db.Reservation.insertOne(claimappointmentObject, function (err, result) {
                if (err) {
                    res.status(InternalServerError);
                    res.send(JSON.stringify({ message: inspect(err) }, null, 2));
                    res.end();
                }
                if (!result) {
                    res.status(BadRequest);
                    res.send(JSON.stringify({ message: "Claim Appointment Function Failed" }, null, 2));
                    res.end();
                }
                else {
                    res.status(OK);
                    res.send(JSON.stringify({ message: "Claimed Appointment Succesfully" }, null, 2));
                    res.end();
                }
            });
        }
    });
};
module.exports.ListmySchedules = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    if (!req.session) {
        return;
    }
    db.Schedule.find({
        schedulerID: new mongodb_1.ObjectID(req.session.logid)
    }).toArray().then((data) => {
        if (data) {
            res.status(OK);
            res.send(JSON.stringify(data));
            res.end();
        }
        else {
            res.status(OK);
            res.send(JSON.stringify([], null, 2));
            res.end();
        }
    }).catch((err) => {
        res.status(InternalServerError);
        res.send(JSON.stringify({ message: inspect(err) }, null, 2));
        res.end();
    });
};
module.exports.ListSchedules = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    if (!req.session) {
        return;
    }
    db.Schedule.find({
        schedulerID: new mongodb_1.ObjectID(req.swagger.params.list.value.schedulerID)
    }).toArray().then((data) => {
        if (data) {
            res.status(OK);
            res.send(JSON.stringify(data));
            res.end();
        }
        else {
            res.status(OK);
            res.send(JSON.stringify([], null, 2));
            res.end();
        }
    }).catch((err) => {
        res.status(InternalServerError);
        res.send(JSON.stringify({ message: inspect(err) }, null, 2));
        res.end();
    });
};
module.exports.SchedulerEditInfo = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    if (req.session && req.session.logid) {
        db.Scheduler.find({
            _id: new mongodb_1.ObjectID(req.swagger.params.scheduler.value._id)
        }).toArray().then((data) => {
            if (data.length) {
                if (data[0].schedulerID.equals(new mongodb_1.ObjectID(req.session.logid))) {
                    db.Scheduler.replaceOne({
                        _id: new mongodb_1.ObjectID(req.swagger.params.scheduler.value._id)
                    }, {
                        schedulerID: data[0].schedulerID,
                        group: req.swagger.params.scheduler.value.group,
                        email: req.swagger.params.scheduler.value.email,
                        password: req.swagger.params.scheduler.value.password,
                    }).then(updateWriteOpResult => {
                        res.status(OK);
                        res.send(JSON.stringify({ message: "Update successful!" }, null, 2));
                        res.end();
                    }).catch(err => {
                        res.status(InternalServerError);
                        res.send(JSON.stringify({ message: inspect(err) }, null, 2));
                        res.end();
                    });
                }
                else {
                    res.status(BadRequest);
                    res.send(JSON.stringify({ message: `Could not update info ${req.session.email}:${req.session.logid}` }, null, 2));
                    res.end();
                }
            }
            else {
                res.status(BadRequest);
                res.send(JSON.stringify({ message: `This scheduler does not exist: ${req.swagger.params.scheduler.value._id}` }, null, 2));
                res.end();
            }
        }).catch((err) => {
            res.status(InternalServerError);
            res.send(JSON.stringify({ message: inspect(err) }, null, 2));
            res.end();
        });
    }
    else {
        res.status(BadRequest);
        res.send(JSON.stringify({ message: "You must be logged in to use this feature." }, null, 2));
        res.end();
    }
};
module.exports.UserEditInfo = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    if (req.session && req.session.logid) {
        db.User.find({
            _id: new mongodb_1.ObjectID(req.swagger.params.user.value._id)
        }).toArray().then((data) => {
            if (data.length) {
                if (data[0]._id.equals(new mongodb_1.ObjectID(req.session.logid))) {
                    db.User.replaceOne({
                        _id: new mongodb_1.ObjectID(req.swagger.params.user.value._id)
                    }, {
                        _id: data[0]._id,
                        firstname: req.swagger.params.user.value.firstname,
                        lastname: req.swagger.params.user.value.lastname,
                        email: req.swagger.params.user.value.email,
                        password: req.swagger.params.user.value.password,
                    }).then(updateWriteOpResult => {
                        res.status(OK);
                        res.send(JSON.stringify({ message: "Update successful!" }, null, 2));
                        res.end();
                    }).catch(err => {
                        res.status(InternalServerError);
                        res.send(JSON.stringify({ message: inspect(err) }, null, 2));
                        res.end();
                    });
                }
                else {
                    res.status(BadRequest);
                    res.send(JSON.stringify({ message: `Could not update info ${req.session.email}:${req.session.logid}` }, null, 2));
                    res.end();
                }
            }
            else {
                res.status(BadRequest);
                res.send(JSON.stringify({ message: `This user does not exist: ${req.swagger.params.user.value._id}` }, null, 2));
                res.end();
            }
        }).catch((err) => {
            res.status(InternalServerError);
            res.send(JSON.stringify({ message: inspect(err) }, null, 2));
            res.end();
        });
    }
    else {
        res.status(BadRequest);
        res.send(JSON.stringify({ message: "You must be logged in to use this feature." }, null, 2));
        res.end();
    }
};
module.exports.ListAppointments = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    if (!req.session) {
        return;
    }
    db.Reservation.find({
        UserID: new mongodb_1.ObjectID(req.session.logid)
    }).toArray().then((data) => {
        if (data) {
            res.status(OK);
            res.send(JSON.stringify(data));
            res.end();
        }
        else {
            res.status(OK);
            res.send(JSON.stringify([], null, 2));
            res.end();
        }
    }).catch((err) => {
        res.status(InternalServerError);
        res.send(JSON.stringify({ message: inspect(err) }, null, 2));
        res.end();
    });
};
module.exports.ListSchedulers = function (req, res) {
    console.log(util.inspect(req.swagger.params, false, Infinity, true));
    res.setHeader('Content-Type', 'application/json');
    if (!req.session) {
        return;
    }
    db.Scheduler.find({}).toArray().then((data) => {
        if (data) {
            res.status(OK);
            res.send(JSON.stringify(data));
            res.end();
        }
        else {
            res.status(OK);
            res.send(JSON.stringify([], null, 2));
            res.end();
        }
    }).catch((err) => {
        res.status(InternalServerError);
        res.send(JSON.stringify({ message: inspect(err) }, null, 2));
        res.end();
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
